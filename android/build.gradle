plugins {
    id("com.android.application")
    id("de.mannodermaus.android-junit5") version "1.10.0.0"
    id 'jacoco'
    id 'org.sonarqube' version '5.0.0.4638'
}

android {
    namespace "se2.alpha.riskapp"
    buildToolsVersion "34.0.0"
    compileSdkVersion 34
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['../assets']
            jniLibs.srcDirs = ['libs']
        }

        test {
            java.srcDirs = ['src/test/java']
        }

    }
    packagingOptions {
        exclude 'META-INF/robovm/ios/robovm.xml'
    }
    defaultConfig {
        applicationId "se2.alpha.riskapp"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
    }

    buildFeatures{
        buildConfig = true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField("String", "API_URL", project.properties["API_URL"].toString())
            buildConfigField("String", "WSS_URL", project.properties["WSS_URL"].toString())
        }
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            buildConfigField("String", "API_URL", project.properties["API_URL"].toString())
            buildConfigField("String", "WSS_URL", project.properties["WSS_URL"].toString())
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
tasks.register('copyAndroidNatives') {
    doFirst {
        file("libs/armeabi-v7a/").mkdirs()
        file("libs/arm64-v8a/").mkdirs()
        file("libs/x86_64/").mkdirs()
        file("libs/x86/").mkdirs()

        configurations.natives.copy().files.each { jar ->
            def outputDir = null
            if (jar.name.endsWith("natives-arm64-v8a.jar")) outputDir = file("libs/arm64-v8a")
            if (jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
            if (jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
            if (jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
            if (outputDir != null) {
                copy {
                    from zipTree(jar)
                    into outputDir
                    include "*.so"
                }
            }
        }
    }
}

tasks.matching { it.name.contains("merge") && it.name.contains("JniLibFolders") }.configureEach { packageTask ->
    packageTask.dependsOn 'copyAndroidNatives'
}

tasks.register('run', Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'se2.alpha.riskapp/se2.alpha.riskapp.AndroidLauncher'
}

eclipse.project.name = appName

dependencies {
    implementation ("com.google.code.gson:gson:2.10")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.9.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation("androidx.security:security-crypto:1.0.0")
    implementation("com.google.dagger:dagger:2.51")
    implementation("com.squareup.okhttp3:okhttp:4.12.0")
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'junit:junit:4.13.1'
    annotationProcessor("org.projectlombok:lombok:1.18.30")
    compileOnly("org.projectlombok:lombok:1.18.30")
    annotationProcessor("com.google.dagger:dagger-compiler:2.51")

    implementation ("org.mockito:mockito-core:5.7.0")
    implementation ("org.json:json:20211205")
    implementation ("org.junit.jupiter:junit-jupiter:5.10.2")
}
tasks.register('jacocoTestReport', Exec) {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
    }
}
tasks.register('jacoco', Exec) {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('jacocoTestReport')
}

sonar {
    properties {

        /*property 'sonar.host.url', 'http://localhost:9000'
        property 'sonar.projectKey', 'riskappbackend'*/
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.projectKey', 'SE2-2024-Group-Alpha_RiskApp'
        property 'sonar.organization', 'se2-2024-group-alpha'
        property 'sonar.java.coveragePlugin', 'jacoco'
        property 'sonar.coverage.jacoco.xmlReportPaths', "${project.projectDir}/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property 'sonar.coverage.exclusions', '**/test/**'
    }
}